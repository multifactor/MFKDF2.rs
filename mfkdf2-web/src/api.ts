// Facade over autogenerated bindings to provide ergonomic API matching reference implementation
import crypto from 'crypto';
import * as raw from './generated/web/mfkdf2.js';
export { uniffiInitAsync } from './index.web.js';
export { initRustLogging, LogLevel } from './generated/web/mfkdf2.js';

// Re-export types
export type {
  Mfkdf2DerivedKey,
  Policy,
  PolicyFactor,
  Mfkdf2Options,
  Mfkdf2Factor,
} from './generated/web/mfkdf2.js';

// Helper to convert Buffer/Uint8Array to ArrayBuffer for UniFFI
function toArrayBuffer(input: ArrayBuffer | Buffer | Uint8Array | undefined): ArrayBuffer | undefined {
  if (input === undefined) return undefined;
  if (input instanceof ArrayBuffer) return input;
  // Buffer and Uint8Array have .buffer property, but may be a view with offset
  const view = input as Uint8Array;
  return view.buffer.slice(view.byteOffset, view.byteOffset + view.byteLength) as ArrayBuffer;
}

// Wrap factor to add ergonomic API
function wrapFactor(factor: raw.Mfkdf2Factor): any {
  const getKind = () => raw.factorTypeKind(factor.factorType);

  return {
    ...factor,
    // Add type property that returns the factor kind (reference implementation compatibility)
    get type() {
      return getKind();
    },
    // Add data property that returns bytes as Buffer
    get data() {
      return Buffer.from(raw.factorTypeBytes(factor.factorType));
    },
  };
}

function wrapSetupFactor(factor: raw.Mfkdf2Factor): any {
  const wrapped = wrapFactor(factor);
  return {
    ...wrapped,
    // TODO (@lonerapier): likely remove these
    // Add async params() method with optional 32-byte key
    async params(key?: ArrayBuffer) {
      const result = raw.setupFactorTypeParams(factor.factorType, key);
      // Parse JSON string returned by UniFFI (Value is serialized as string)
      return typeof result === 'string' ? JSON.parse(result) : result;
    },
    // Add async output() method with optional 32-byte key
    async output(key?: ArrayBuffer) {
      const result = raw.setupFactorTypeOutput(factor.factorType, key);
      // Parse JSON string returned by UniFFI (Value is serialized as string)
      return typeof result === 'string' ? JSON.parse(result) : result;
    }
  }
}

function wrapDeriveFactor(factor: raw.Mfkdf2Factor): any {
  const wrapped = wrapFactor(factor);
  return {
    ...wrapped,
  }
}

// Wrap policy to add $id property for JSON schema compatibility
function wrapPolicy(policy: any): any {
  const wrapped = {
    ...policy,
    $id: policy.id,
    $schema: policy.schema
  };
  delete wrapped.id;
  delete wrapped.schema;

  for (const factor of wrapped.factors) {
    factor.type = factor.type ?? factor.kind;
    delete factor.kind;
    factor.params = JSON.parse(factor.params);
  }

  return wrapped;
}

// TODO (@lonerapier): try to remove this
// Unwrap policy to remove $id and $schema
function unwrapPolicy(policy: any): raw.Policy {
  for (const factor of policy.factors) {
    factor.kind = factor.type ? factor.type : factor.kind;
    delete factor.type;
    factor.params = typeof factor.params === 'object' ? JSON.stringify(factor.params) : factor.params;
  }
  policy.id = policy.$id ?? policy.id;
  policy.schema = policy.$schema ?? policy.schema;
  delete policy.$id;
  delete policy.$schema;

  policy.time = policy.time ?? 0;
  policy.memory = policy.memory ?? 0;

  delete policy.size;

  return policy;
}

// Wrap derived key to add $id to policy
function wrapDerivedKey(key: raw.Mfkdf2DerivedKey): any {
  return {
    ...key,
    policy: wrapPolicy(key.policy),
    // Add entropyBits alias for compatibility
    get key() {
      return Buffer.from(key.key);
    },
    get secret() {
      return Buffer.from(key.secret);
    },
    get shares() {
      return key.shares.map(share => Buffer.from(share));
    },
    get entropyBits() {
      return key.entropy;
    },
    get outputs() {
      return Object.fromEntries(Array.from(key.outputs.entries()).map(([key, value]) => [key, JSON.parse(value)]));
    }

  }
};

export const mfkdf = {
  setup: {
    factors: {
      // Setup factors are async in reference implementation
      // Default values match reference implementation's defaults.js
      async password(password: string, options: { id?: string } = {}) {
        const factor = await raw.setupPassword(password, {
          id: options.id
        });
        return wrapSetupFactor(factor);
      },
      async hotp(options: { secret?: ArrayBuffer | Buffer, id?: string, digits?: number, hash?: raw.OtpHash, issuer?: string, label?: string } = {}) {
        const factor = await raw.setupHotp({
          id: options.id,
          secret: toArrayBuffer(options.secret),
          digits: options.digits ?? 6,
          hash: options.hash ?? raw.OtpHash.Sha1,
          issuer: options.issuer ?? 'MFKDF',
          label: options.label ?? 'mfkdf.com'
        });
        return wrapSetupFactor(factor);
      },
      async totp(options: { secret?: ArrayBuffer | Buffer, id?: string, digits?: number, hash?: raw.OtpHash, issuer?: string, label?: string, window?: bigint, step?: bigint, time?: bigint, oracle?: number[] } = {}) {
        const factor = await raw.setupTotp({
          id: options.id,
          secret: toArrayBuffer(options.secret),
          digits: options.digits ?? 6,
          hash: options.hash ?? raw.OtpHash.Sha1,
          issuer: options.issuer ?? 'MFKDF',
          label: options.label ?? 'mfkdf.com',
          time: options.time ?? BigInt(Date.now()), // BUG: uniffi doesn't support optional integers
          window: options.window ?? 87600n,
          step: options.step ?? 30n,
          oracle: options.oracle
        });
        return wrapSetupFactor(factor);
      },
      async uuid(options: { uuid?: string, id?: string } = {}) {
        const factor = await raw.setupUuid({
          id: options.id,
          uuid: options.uuid
        });
        return wrapSetupFactor(factor);
      },
      async hmacsha1(options: { secret?: ArrayBuffer | Buffer, id?: string } = {}) {
        const factor = await raw.setupHmacsha1({
          id: options.id,
          secret: toArrayBuffer(options.secret)
        });
        return wrapSetupFactor(factor);
      },
      async question(answer: string, options: { question?: string, id?: string } = {}) {
        const factor = await raw.setupQuestion(answer, {
          id: options.id,
          question: options.question
        });
        return wrapSetupFactor(factor);
      },
      async ooba(options: { key?: crypto.webcrypto.CryptoKey, id?: string, length?: number, params?: Record<string, any> }) {
        const key = options.key ? await crypto.webcrypto.subtle.exportKey('jwk', options.key) : undefined;
        const keyString = JSON.stringify(key);
        const factor = await raw.setupOoba({
          id: options.id,
          key: keyString,
          length: options.length ?? 6,
          params: options.params ? JSON.stringify(options.params) : undefined
        });
        return wrapSetupFactor(factor);
      },
      async passkey(secret: ArrayBuffer | Buffer, options: { id?: string } = {}) {
        const factor = await raw.setupPasskey(toArrayBuffer(secret) || new Uint8Array(32).buffer, {
          id: options.id,
        });
        return wrapSetupFactor(factor);
      },
      async stack(factors: raw.Mfkdf2Factor[], options: { id?: string, threshold?: number, salt?: ArrayBuffer | Buffer | Uint8Array } = {}) {
        const factor = await raw.setupStack(factors, {
          id: options.id,
          threshold: options.threshold,
          salt: toArrayBuffer(options.salt)
        });
        return wrapSetupFactor(factor);
      }
    },
    async key(
      factors: raw.Mfkdf2Factor[],
      options: { id?: string; threshold?: number; salt?: ArrayBuffer | Buffer | Uint8Array, stack?: boolean, integrity?: boolean, time?: number, memory?: number } = {}
    ) {
      const key = await raw.setupKey(factors, {
        id: options.id,
        threshold: options.threshold,
        salt: toArrayBuffer(options.salt),
        stack: options.stack,
        integrity: options.integrity,
        time: options.time,
        memory: options.memory
      });
      return wrapDerivedKey(key);
    }
  },
  derive: {
    factors: {
      async password(password: string) {
        return wrapDeriveFactor(await raw.derivePassword(password));
      },
      async hotp(code: number) {
        return wrapDeriveFactor(await raw.deriveHotp(code));
      },
      async uuid(uuid: string) {
        return wrapDeriveFactor(await raw.deriveUuid(uuid));
      },
      async hmacsha1(response: Buffer) {
        const buffer = toArrayBuffer(response);
        if (!buffer) throw new Error('Invalid response');
        return wrapDeriveFactor(await raw.deriveHmacsha1(buffer));
      },
      async question(answer: string) {
        return wrapDeriveFactor(await raw.deriveQuestion(answer));
      },
      async ooba(code: string) {
        return wrapDeriveFactor(await raw.deriveOoba(code));
      },
      async passkey(secret: ArrayBuffer | Buffer) {
        return wrapDeriveFactor(await raw.derivePasskey(toArrayBuffer(secret) || new Uint8Array(32).buffer)); // TODO (@lonerapier): fix
      },
      async stack(factors: Record<string, any> | Map<string, any>) {
        // Convert object to Map if needed
        const factorMap = factors instanceof Map
          ? factors
          : new Map(Object.entries(factors));
        return wrapDeriveFactor(await raw.deriveStack(factorMap));
      },
      async totp(code: number, options?: { time?: bigint, oracle?: number[] }) {
        const factor = await raw.deriveTotp(code, {
          time: options?.time,
          oracle: options?.oracle
        });
        return wrapDeriveFactor(factor);
      }
    },
    async key(policy: any, factors: Record<string, any> | Map<string, any>, verify?: boolean, stack?: boolean) {
      // Convert object to Map if needed
      const factorMap = factors instanceof Map
        ? factors
        : new Map(Object.entries(factors));

      const key = await raw.deriveKey(unwrapPolicy(policy), factorMap, verify, stack);
      return wrapDerivedKey(key);
    }
  },
  secrets: {
    share(secret: ArrayBuffer, threshold: number, shares: number): ArrayBuffer[] {
      // Placeholder - implement if needed in Rust
      const result: ArrayBuffer[] = [];
      for (let i = 0; i < shares; i++) {
        result.push(secret);
      }
      return result;
    },
    combine(shares: (ArrayBuffer | null)[], threshold: number, totalShares: number): ArrayBuffer {
      const validShares = shares.filter(s => s !== null) as ArrayBuffer[];
      if (validShares.length < threshold) {
        throw new Error('Not enough shares');
      }
      return validShares[0];
    }
  },
  policy: {
    async validate(policy: any) {
      return raw.policyValidate(unwrapPolicy(policy));
    },
    async setup(factor: raw.Mfkdf2Factor, options?: { id?: string, threshold?: number, salt?: ArrayBuffer | Buffer | Uint8Array, integrity?: boolean }) {
      return wrapDerivedKey(await raw.policySetup(factor, {
        id: options?.id,
        threshold: options?.threshold,
        salt: toArrayBuffer(options?.salt),
        integrity: options?.integrity
      }));
    },
    async derive(policy: any, factors: Record<string, any> | Map<string, any>, verify?: boolean) {
      const factorMap = factors instanceof Map
        ? factors
        : new Map(Object.entries(factors));

      return wrapDerivedKey(await raw.policyDerive(unwrapPolicy(policy), factorMap, verify));
    },
    async evaluate(policy: any, factorIds: string[]) {
      return await raw.policyEvaluate(unwrapPolicy(policy), factorIds);
    },
    async atLeast(n: number, factors: raw.Mfkdf2Factor[]) {
      return wrapSetupFactor(await raw.policyAtLeast(n, factors));
    },
    async all(factors: raw.Mfkdf2Factor[]) {
      return wrapSetupFactor(await raw.policyAll(factors));
    },
    async any(factors: raw.Mfkdf2Factor[]) {
      return wrapSetupFactor(await raw.policyAny(factors));
    },
    async or(factor1: raw.Mfkdf2Factor, factor2: raw.Mfkdf2Factor) {
      return wrapSetupFactor(await raw.policyOr(factor1, factor2));
    },
    async and(factor1: raw.Mfkdf2Factor, factor2: raw.Mfkdf2Factor) {
      return wrapSetupFactor(await raw.policyAnd(factor1, factor2));
    }
  }
};

export default mfkdf;